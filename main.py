import telebot
from telebot import types
import numpy as np
import re
import requests
from bs4 import BeautifulSoup as bs
import pandas as pd
from settings import API_TOKEN

#–ö–æ–Ω–Ω–µ–∫—Ç–∏–º—Å—è –∫ –±–æ—Ç—É
bot = telebot.TeleBot(API_TOKEN)
bot.set_webhook()
#–ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∏—Å–∫–æ–≤
disks = pd.read_csv('disk_size.csv', delimiter=";",
                        names=['–†–∞–∑–º–µ—Ä —à–∏–Ω—ã', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è'])


#–û—à–∏–±–∫–∞ –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
error_mes = "–û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º —à–∏–Ω. \n\n–í–Ω–æ–≤—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
#–û—à–∏–±–∫–∞ –¥–ª—è –¥—é–π–º–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
error_inch = "–û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥—é–π–º–æ–≤—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —à–∏–Ω. \n\n–í–Ω–æ–≤—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


def info_check(tyre):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–º–µ—Ä.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —à–∏–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    tyre = re.split("/|R|r| ", tyre) #–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —à–∏–Ω—ã
    return len(tyre) == 3 and len(tyre[0]) == 3 and len(tyre[1]) == 2 and len(tyre[2]) == 2 \
           and np.all([(tyre[i]).isdigit() for i in range(3)]) and (int(tyre[0]) % 10 == 5 or int(tyre[0]) % 10 == 0) \
           and (int(tyre[1]) % 10 == 0 or int(tyre[1]) % 10 == 5)


def info_check_inch(tyre):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–º–µ—Ä.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä —à–∏–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    def is_number(str):
        try:
            float(str)
            return True
        except ValueError:
            return False

    tyre = re.split("/|R|r| ", tyre)
    return len(tyre[0]) == 2 and len(tyre[1]) <= 4 and len(tyre[2]) == 2 \
           and np.all([is_number(tyre[i]) for i in range(3)])


def height_calc(tyre):
    """
    –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã—Å–æ—Ç—ã –∫–æ–ª–µ—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä –≤ –º–º.
    """
    if info_check(tyre) == True: #–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        tyre = re.split("/|R|r| ", tyre) #–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —à–∏–Ω—ã
        width = int(tyre[0])
        height = int(tyre[1])
        raduis = int(tyre[2])
        return int(width * (height / 100) * 2 + raduis * 25.4)
    else:
        return False


def height_calc_inch(tyre):
    """
    –ü–æ–∏—Å–∫ –¥—é–π–º–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–∞ –∫–æ–ª–µ—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∏–∞–º–µ—Ç—Ä –≤ –¥—é–π–º–∞—Ö.
    """
    tyre = height_calc(tyre) #–ò—â–µ–º –¥–∏–∞–º–µ—Ç—Ä —à–∏–Ω—ã
    return round(tyre/25.4)


def compare(old_tyre, new_tyre):
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–æ–≤–æ–π –∏ —Å—Ç–∞—Ä–æ–π —Ä–µ–∑–∏–Ω—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ä–∞–∑–º–µ—Ä–µ.
    """
    if info_check(old_tyre) and info_check(new_tyre) == True: #–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        return int(height_calc(new_tyre) - height_calc(old_tyre)) #
    else:
        return "error"


def speed(old_tyre, new_tyre):
    """
    –ü–æ–∏—Å–∫ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ —Å–æ—Ç—ã—Ö.
    """
    if info_check(old_tyre) and info_check(new_tyre) == True: #–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        speed = float(height_calc(new_tyre) * 3.14 - height_calc(old_tyre) * 3.14) / float(height_calc(old_tyre) \
                                                                                           * 3.14) * 100
        return round(speed, 2)
    else:
        return "error"


def amer_calc(tyre):
    """
    –ü–µ—Ä–µ–≤–æ–¥ –¥—é–π–º–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —à–∏–Ω—ã —É–∂–µ –≤ –µ–≤—Ä–æ —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    def euro_select(height):
        """–û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 5 –∏–ª–∏ 0"""
        return str(round(height / 5.0) * 5)

    if info_check_inch(tyre) == True: #–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        tyre = re.split("/|R|r| ", tyre) #–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —à–∏–Ω—ã
        height = int(tyre[0])
        width = float(tyre[1])
        raduis = int(tyre[2])
        new_height = width * 25.4
        new_width = (height * 25.4 - raduis * 25.4) / 2 / (width * 25.4) * 100
        return "".join([euro_select(new_height),"/", str(round(new_width/5.0)*5), "R", str(raduis)])
    else:
        return "error"


def disk_size(tyre):
    """
    –ü–æ–¥–±–æ—Ä –¥–∏—Å–∫–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞.
    """
    if info_check(tyre) == True:
        tyre = re.split("/|R|r| ", tyre) #–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —à–∏–Ω—ã
        rad = tyre[2] #–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å
        tyre = "/".join(tyre[0:3]) #–ü—Ä–∏–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        try: #–ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ—Ç
            idx = list(disks.loc[(disks[['–†–∞–∑–º–µ—Ä —à–∏–Ω—ã']] == [tyre]).all(axis=1)].index) #–ò—â–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
            return rad + "X" + disks.iloc[idx[0]]['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è']
        except IndexError:
            return "error"
    else:
        bot.reply_to(message, error_mes, reply_markup=markup)
        bot.register_next_step_handler(message, start2)


def tyre_search(tyre, i, seas):
    """
    –ü–æ–∏—Å–∫ —à–∏–Ω.
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ.
    """
    if info_check(tyre) == True:
        tyre = re.split("/|R|r| ", tyre) #–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        #–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ú–æ—Å–∞–≤—Ç–æ—à–∏–Ω—ã, —Å–æ–∑–¥–∞–µ–º URL –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –∏–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞
        URL_TEMPLATE = "https://mosautoshina.ru/catalog/tyre/search/by-size/-"+"-".join(tyre)+"-" + str(seas)+"---/"
        r = requests.get(URL_TEMPLATE)
        soup = bs(r.text, "html.parser")

        #–°—ã—Ä—ã–µ —Å–ø–∏—Å–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
        tyres_names = soup.find_all("div", class_="product-name")
        tyres_prices = soup.find_all("div", class_="product-price")
        tyres_links = soup.find_all("a", class_="product-container")

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if len(tyres_names) > 0:
            tyre_name = [name.text for name in tyres_names]
            tyre_price = [("".join((price.text).split()).rstrip("‚ÇΩ")) for price in tyres_prices]
            tyre_link = [("https://mosautoshina.ru" + link.get('href')) for link in tyres_links]
            #–°–æ–∑–¥–∞–µ–º –≥–æ—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
            item_card = "üõû" + tyre_name[i] + "\n" + "üí∞–¶–µ–Ω–∞ –∑–∞ –∫–æ–ª–µ—Å–æ: " + tyre_price[i] + "‚ÇΩ" + "\n"\
                        + "üõí" + tyre_link[i]
            return item_card
        else:
            return False
    else:
        return False


@bot.message_handler(commands=["start"])
def start(m, res=False):
    """–ù–∞—á–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, –¥–µ–ª–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–Ω–µ—à–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä")
    item2 = types.KeyboardButton("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —à–∏–Ω")
    item3 = types.KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –¥—é–π–º–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
    item4 = types.KeyboardButton("–ü–æ–¥–±–æ—Ä –¥–∏—Å–∫–æ–≤")
    item5 = types.KeyboardButton("–ü–æ–∏—Å–∫ —à–∏–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)
    markup.add(item5)
    bot.send_message(m.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —à–∏–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä! \n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=markup)


@bot.message_handler(content_types='text')
def menu(message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.
    –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–æ–∫, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ.
    """
    if message.text.strip() == '–í–Ω–µ—à–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä':
        bot.reply_to(message, '–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ–ª–µ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX/XX/XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 255/55/17)', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, message_input_external_diameter)
    elif message.text.strip() == '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —à–∏–Ω':
        bot.reply_to(message,'–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ä–∞–∑–º–µ—Ä –∫–æ–ª–µ—Å, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å —Å–µ–π—á–∞—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX/XX/XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 255/55/17)', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, message_input_compare_step1)
    elif message.text.strip() == '–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –¥—é–π–º–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞':
        bot.reply_to(message,'–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ä–∞–∑–º–µ—Ä –¥—é–π–º–æ–≤–æ–≥–æ –∫–æ–ª–µ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX/XX/XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 33/12.5/15)', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, message_input_inch)
    elif message.text.strip() == '–ü–æ–∏—Å–∫ —à–∏–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ':
        #–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ–∑–æ–Ω–∞ —à–∏–Ω
        bot.register_next_step_handler(message, message_input_season)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        summer = types.KeyboardButton("–õ–µ—Ç–æ")
        winter = types.KeyboardButton("–ó–∏–º–∞")
        ms = types.KeyboardButton("–í—Å–µ—Å–µ–∑–æ–Ω–∫–∞")
        back = types.KeyboardButton("<< –ù–∞–∑–∞–¥")
        markup.add(summer)
        markup.add(winter)
        markup.add(ms)
        markup.add(back)
        #–û—Ç–≤–µ—Ç
        bot.reply_to(message, '–°–µ–π—á–∞—Å —è –ø–æ–ø—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∏–Ω—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ú–æ—Å–∞–≤—Ç–æ—à–∏–Ω–∞. \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω', reply_markup=markup)
    elif message.text.strip() == '–ü–æ–¥–±–æ—Ä –¥–∏—Å–∫–æ–≤':
        bot.register_next_step_handler(message, message_input_disk)
        bot.reply_to(message,
                     '–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ä–∞–∑–º–µ—Ä —à–∏–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX/XX/XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 255/55/17), –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞',
                     reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.reply_to(message,'–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é c –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ')


@bot.message_handler(content_types=['text'])
def message_input_external_diameter(message):
    """–ü–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–∏–∞–º–µ—Ç—Ä–∞"""
    global text
    text = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton("<< –ù–∞–∑–∞–¥")
    markup.add(back)
    if (height_calc(message.text)) != False:
        bot.reply_to(message, f"–í–Ω–µ—à–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä –≤–∞—à–µ–≥–æ –∫–æ–ª–µ—Å–∞: " + str(height_calc(message.text)) + "–º–º" + "\n–í –¥—é–π–º–∞—Ö: " + str(height_calc_inch(message.text)) + '"', reply_markup = markup)
        bot.register_next_step_handler(message, start2)
    else:
        bot.reply_to(message, error_mes, reply_markup = markup)
        bot.register_next_step_handler(message, start2)


@bot.message_handler(content_types=['text'])
def message_input_inch(message):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –¥—é–π–º–æ–≤"""
    global inch
    inch = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton("<< –ù–∞–∑–∞–¥")
    markup.add(back)
    if (info_check_inch(inch)) != False:
        bot.reply_to(message, f"–í–∞—à–µ –∫–æ–ª–µ—Å–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º—É —Ä–∞–∑–º–µ—Ä—É " + str(amer_calc(inch)), reply_markup = markup)
        bot.register_next_step_handler(message, start2)
    else:
        bot.reply_to(message, error_inch, reply_markup = markup)
        bot.register_next_step_handler(message, start2)


@bot.message_handler(content_types=['text'])
def message_input_season(message):
    """–í—ã–±–æ—Ä —Å–µ–∑–æ–Ω–∞"""
    global season
    global seas
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton("<< –ù–∞–∑–∞–¥")
    markup.add(back)
    season = message.text
    #–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–µ–∑–æ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é seas, –∫—É–¥–∞ –∑–∞–ø–∏—à–µ–º –∏–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ URL
    if message.text.strip() == '–õ–µ—Ç–æ':
        seas = 1
        bot.reply_to(message,
                     '–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX/XX/XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 255/55/17)\n\n–ü–æ–∫–∞ —è –º–æ–≥—É –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ 10 –ø–æ–∑–∏—Ü–∏–π.', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, message_input_search)
    elif message.text.strip() == '–ó–∏–º–∞':
        seas = 2
        bot.reply_to(message,'–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX/XX/XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 255/55/17)\n\n–ü–æ–∫–∞ —è –º–æ–≥—É –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ 10 –ø–æ–∑–∏—Ü–∏–π.', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, message_input_search)
    elif message.text.strip() == '–í—Å–µ—Å–µ–∑–æ–Ω–∫–∞':
        seas = 3
        bot.reply_to(message,
                     '–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX/XX/XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 255/55/17)\n\n–ü–æ–∫–∞ —è –º–æ–≥—É –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ 10 –ø–æ–∑–∏—Ü–∏–π.', reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, message_input_search)
    elif message.text.strip() == '<< –ù–∞–∑–∞–¥':
        start2(message)
    else:
        bot.reply_to(message, "–û—à–∏–±–∫–∞!", reply_markup = markup)
        bot.register_next_step_handler(message, start2)


@bot.message_handler(content_types=['text'])
def message_input_search(message):
    """–ü–æ–∏—Å–∫ –ø–æ –ú–æ—Å–∞–≤—Ç–æ—à–∏–Ω–µ"""
    global size
    size = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton("<< –ù–∞–∑–∞–¥")
    markup.add(back)

    if (info_check(size)) != False:
        try:
            for i in range(10):
                if tyre_search(size, i, seas) != False:
                    bot.send_message(message.chat.id, tyre_search(size, i, seas))
                else:
                    bot.send_message(message.chat.id, "–¢–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω :(", reply_markup = markup)
                    break
            bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
            bot.register_next_step_handler(message, start2)
        except IndexError:
            bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
            bot.register_next_step_handler(message, start2)
    else:
        bot.reply_to(message, error_mes, reply_markup = markup)
        bot.register_next_step_handler(message, start2)


def start2(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–í–Ω–µ—à–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä")
    item2 = types.KeyboardButton("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —à–∏–Ω")
    item3 = types.KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –¥—é–π–º–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
    item4 = types.KeyboardButton("–ü–æ–¥–±–æ—Ä –¥–∏—Å–∫–æ–≤")
    item5 = types.KeyboardButton("–ü–æ–∏—Å–∫ —à–∏–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)
    markup.add(item5)
    #–û—Ç–≤–µ—Ç
    bot.send_message(message.chat.id,
                     '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def message_input_disk(message):
    """–ü–æ–¥–±–æ—Ä –¥–∏—Å–∫–∞"""
    global tyre
    tyre = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton("<< –ù–∞–∑–∞–¥")
    markup.add(back)
    if info_check(tyre) == True:
        if disk_size(tyre) != "error":
            bot.reply_to(message, '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞:' + ' ' + disk_size(tyre), reply_markup=markup)
            bot.register_next_step_handler(message, start2)
        else:
            bot.reply_to(message, error_mes, reply_markup=markup)
            bot.register_next_step_handler(message, start2)
    else:
        bot.reply_to(message, error_mes, reply_markup=markup)
        bot.register_next_step_handler(message, start2)


@bot.message_handler(content_types=['text'])
def message_input_compare_step1(message):
    """–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —à–∏–Ω"""
    global old_item
    old_item = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton("<< –ù–∞–∑–∞–¥")
    markup.add(back)
    if info_check(old_item) == True:
        bot.reply_to(message,'–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ä–∞–∑–º–µ—Ä –∫–æ–ª–µ—Å, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX/XX/XX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 255/55/17)')  # Bot reply '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç'
        bot.register_next_step_handler(message, message_input_compare_step2)
    else:
        bot.reply_to(message, error_mes, reply_markup=markup)
        bot.register_next_step_handler(message, start2)


@bot.message_handler(content_types=['text'])
def message_input_compare_step2(message):
    """–í—Ç–æ—Ä–æ–π —à–∞–≥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —à–∏–Ω"""
    global new_item
    new_item = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    back = types.KeyboardButton("<< –ù–∞–∑–∞–¥")
    markup.add(back)
    if compare(old_item, new_item) != "error":
        if compare(old_item, new_item) > 0: #–ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–∞–∑–∞–ª—Å—è –±–æ–ª—å—à–µ —Å—Ç–∞—Ä–æ–≥–æ
            answer = "–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º –¥–∏–∞–º–µ—Ç—Ä–µ —Å–æ—Å—Ç–∞–≤–∏—Ç " + str(compare(old_item, new_item)) + "–º–º \n–ö–ª–∏—Ä–µ–Ω—Å –º–∞—à–∏–Ω—ã —Å—Ç–∞–Ω–µ—Ç –≤—ã—à–µ –Ω–∞ "\
                     + str(compare(old_item, new_item)/2) + "–º–º" + "\n–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ –±—É–¥—É—Ç –º–µ–Ω—å—à–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞ " \
                     + str(speed(old_item, new_item)) + "%"
        elif compare(old_item, new_item) < 0: #–ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–∞–∑–∞–ª—Å—è –±–æ–ª—å—à–µ –Ω–æ–≤–æ–≥–æ
            answer = "–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤–Ω–µ—à–Ω–µ–º –¥–∏–∞–º–µ—Ç—Ä–µ —Å–æ—Å—Ç–∞–≤–∏—Ç " + str(compare(old_item, new_item)) + "–º–º \n–ö–ª–∏—Ä–µ–Ω—Å –º–∞—à–∏–Ω—ã —Å—Ç–∞–Ω–µ—Ç –Ω–∏–∂–µ –Ω–∞ " \
                     + str(abs(compare(old_item, new_item) / 2)) + "–º–º" + "\n–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞ –±—É–¥—É—Ç –±–æ–ª—å—à–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞ " \
                     + str(abs(speed(old_item, new_item))) + "%"
        else: #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–∞
            answer = "–†–∞–∑–º–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è"
        bot.reply_to(message, answer, reply_markup = markup)
        bot.register_next_step_handler(message, start2)
    else:
        bot.reply_to(message, error_mes, reply_markup = markup)
        bot.register_next_step_handler(message, start2)

bot.polling(none_stop=True) #–ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è